#include <iostream>
#include <string>

using namespace std;

class person {
protected:
	char name[40];
public:
	void setName() {
		cout << "Enter name: ";
		cin >> name;
	}
	void printName() {
		cout << "\n Name is: " << name;
	}
	string getName() { return name; }
};

int main()
{
	void bsort(person**, int);
	person* persPtr[100];
	int n = 0;
	char choice;
	do {
		persPtr[n] = new person;
		persPtr[n]->setName();
		n++;
		cout << "Enter another (y/n)?";
		cin >> choice;
	} while (choice == 'y');
	cout << "\nUnsorted list:";
	for (int j = 0; j < n; j++)
	{
		cout << "\nPerson number " << j + 1;
		persPtr[j]->printName();
	}
	bsort(persPtr, n);
	cout << "\nSorted list:";
	for (int j = 0; j < n; j++) {
		persPtr[j]->printName();
	}
	cout << endl;
	return 0;
}

void bsort(person** pp, int n) {
	void order(person**, person**);
	int j, k;
	for (j = 0; j < n - 1; j++)
		for (k = j + 1; k < n; k++)
			order(pp + j, pp + k);
}
void order(person** pp1, person** pp2) {
	if ((*pp1)->getName() > (*pp2)->getName()) {
		person* tempptr = *pp1;
		*pp1 = *pp2;
		*pp2 = tempptr;
	}
}

---------------------------------------------

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>

using namespace std;

class DynamicSingleton {
private:
	DynamicSingleton() : name("Dweb") {};
	DynamicSingleton(const DynamicSingleton& other);
	string name;
	static DynamicSingleton* instance;
public:
	string getName() { return name; }
	static DynamicSingleton* GetInstance() {
		if (instance == NULL) instance = new DynamicSingleton();
		return instance;
	}
};
DynamicSingleton* DynamicSingleton::instance = nullptr;

int main()
{
	DynamicSingleton* obj1 = DynamicSingleton::GetInstance();
	DynamicSingleton* obj2 = DynamicSingleton::GetInstance();
	DynamicSingleton& obj3 = *obj2;

	cout << obj1->getName() << endl;
	cout << obj2->getName() << endl;
	cout << obj3.getName() << endl;

	return 0;
}

-------------------------------------------

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>

using namespace std;

class strCount {
private:
	int count;
	char* str;
	friend class String;
	strCount(char const s[]) {
		int length = strlen(s);
		str = new char[length + 1];
		strcpy(str, s);
		count = 1;
	}
	~strCount() { delete[] str; }
};

class String {
private:
	strCount* psc;
public:
	String() { psc = new strCount("NULL"); }
	String(char const s[]) { psc = new strCount(s); }
	String(String& S) { psc = S.psc; (psc->count)++; }
	~String() {
		if (psc->count == 1)
			delete psc;
		else
			(psc->count)--;
	}
	void display() {
		cout << psc->str;
		cout << "addr=" << psc << ")";
	}
	void operator = (String& S) {
		if (psc->count == 1)
			delete psc;
		else
			(psc->count)--;
		psc = S.psc;
		(psc->count)++;
	}
};

int main()
{
	String s3 = "ABCDEFG";
	cout << "\ns3="; s3.display();
	String s1;
	s1 = s3;
	cout << "\ns1="; s1.display();
	String s2(s3);
	cout << "\ns2="; s2.display();
	cout << endl;
	return 0;
}

